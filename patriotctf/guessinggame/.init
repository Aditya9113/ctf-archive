#!/bin/bash

## Uncomment if glibc is already there
# sudo apt-get install patchelf
# patchelf --set-interpreter /opt/glibc-2.34/lib/ld-linux-x86-64.so.2 --set-rpath /challenge/glibc-2.34/lib /challenge/guessinggame

# ## Updates the system
# # Update package list
# sudo apt update

# # Install update-manager-core if not already installed
# sudo apt install -y update-manager-core

# # Perform the release upgrade
# sudo do-release-upgrade -d -f DistUpgradeViewNonInteractive

# Set up the environment to use the extracted glibc libraries
# export LD_LIBRARY_PATH=/challenge/glibc:$LD_LIBRARY_PATH

# # Use patchelf to set the interpreter and rpath for the guessinggame binary
# patchelf --set-interpreter /challenge/glibc/ld-linux-aarch64.so.1 --set-rpath /challenge/glibc /challenge/guessinggame

# ln -s /flag flag.txt


#!/bin/bash
# Log file location
LOG_FILE="/challenge/init.log"

# Logging the start of the script
echo "$(date) - Starting .init script execution as user $(whoami)" >> "$LOG_FILE"

# Setting LD_LIBRARY_PATH
export LD_LIBRARY_PATH="/challenge:$LD_LIBRARY_PATH"
echo "$(date) - LD_LIBRARY_PATH set to $LD_LIBRARY_PATH" >> "$LOG_FILE"

# Verify and log if LD_LIBRARY_PATH contains /challenge
if [[ ":$LD_LIBRARY_PATH:" == *":/challenge:"* ]]; then
    echo "$(date) - LD_LIBRARY_PATH update successful" >> "$LOG_FILE"
else
    echo "$(date) - LD_LIBRARY_PATH update failed" >> "$LOG_FILE"
fi

# Logging the end of the script
echo "$(date) - Ending .init script execution" >> "$LOG_FILE"
